---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: openshift-config
  name: multicluster-observability-job
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: multicluster-observability-job
      restartPolicy: Never
      containers:
      - name: ansible
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli
        command:
        - /bin/sh
        - -c
        - |
          set -euxo pipefail
          DOCKER_CONFIG_JSON=$(oc extract secret/pull-secret -n openshift-config --to=-)

          # try to delete secret, don't fail on error
          oc delete secret multiclusterhub-operator-pull-secret -n open-cluster-management-observability || true
          oc create secret generic multiclusterhub-operator-pull-secret \
              -n open-cluster-management-observability \
              --from-literal=.dockerconfigjson="$DOCKER_CONFIG_JSON" \
              --type=kubernetes.io/dockerconfigjson

#            BUCKET_NAME=$(oc get objectbucketclaim observer-bucket -n open-cluster-management-observability -o jsonpath='{.spec.objectBucketName}')
#            BUCKET_HOST=$(oc get objectbucket obc-open-cluster-management-observability-observer-bucket -n open-cluster-management-observability -o jsonpath='{.status.host}')
#            BUCKET_PORT=$(oc get objectbucket obc-open-cluster-management-observability-observer-bucket -n open-cluster-management-observability -o jsonpath='{.status.port}')
#
#            ACCESS_KEY=$(oc get objectbucketclaim observer-bucket -n open-cluster-management-observability -o jsonpath='{.spec.additionalConfig.accessKey}')
#            SECRET_KEY=$(oc get objectbucketclaim observer-bucket -n open-cluster-management-observability -o jsonpath='{.spec.additionalConfig.secretKey}')
#
#            oc create secret generic thanos-object-store \
#                -n open-cluster-management-observability \
#                --from-literal=thanos.yaml: ="$ACCESS_KEY" \
#                --from-literal=secret_key="$SECRET_KEY" \
#                --from-literal=bucket="$BUCKET_NAME" \
#                --from-literal=endpoint="$BUCKET_HOST:$BUCKET_PORT" \
#                --from-literal=insecure="true"
