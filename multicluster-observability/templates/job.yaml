---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
  # annotations:
  #   argocd.argoproj.io/hook: PostSync
  #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: multicluster-observability-job
  # annotations:
  #   argocd.argoproj.io/hook: PostSync
  #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
  # annotations:
  #   argocd.argoproj.io/hook: PostSync
  #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: multicluster-observability-job
      restartPolicy: Never
      containers:
      - name: ansible
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli
        command:
        - /bin/sh
        - -c
        - |
          # step 1
          # Load up multiclusterhub-operator-pull-secret with cluster-config pull secret
          # set -euxo pipefail
          NAMESPACE="open-cluster-management-observability"

          # DOCKER_CONFIG_JSON=$(oc extract secret/pull-secret -n openshift-config --to=-)
          #
          # # try to delete secret, don't fail on error
          # oc delete secret multiclusterhub-operator-pull-secret -n $NAMESPACE || true
          #
          # oc create secret generic multiclusterhub-operator-pull-secret \
          #   -n $NAMESPACE \
          #   --from-literal=.dockerconfigjson="$DOCKER_CONFIG_JSON" \
          #   --type=kubernetes.io/dockerconfigjson
          #
          # # step 2
          # # Load up thanos-object-storage secret with object store credentials and bucket info
          #
          BUCKET_NAME=$(oc get cm observer-bucket -n $NAMESPACE -o jsonpath='{.data.BUCKET_NAME}')
          BUCKET_HOST=$(oc get cm observer-bucket -n $NAMESPACE -o jsonpath='{.data.BUCKET_HOST}')
          BUCKET_PORT=$(oc get cm observer-bucket -n $NAMESPACE -o jsonpath='{.data.BUCKET_PORT}')

          ACCESS_KEY=$(oc get secret observer-bucket -n $NAMESPACE -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 -d)
          SECRET_KEY=$(oc get secret observer-bucket -n $NAMESPACE -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 -d)
          echo "$BUCKET_NAME $BUCKET_HOST $BUCKET_PORT $ACCESS_KEY $SECRET_KEY"

          cat << EOF > thanos.yaml
          type: s3
          config:
            bucket: $BUCKET_NAME
            endpoint: s3.openshift-storage.svc:443
            access_key: $ACCESS_KEY
            secret_key: $SECRET_KEY
            http_config:
              insecure_skip_verify: true
          EOF
          echo "thanos.yaml:\n$(cat thanos.yaml)"
          echo "now try to make secret"

          oc delete secret thanos-object-storage -n $NAMESPACE || true
          oc create secret generic thanos-object-storage \
            -n open-cluster-management-observability \
            --from-file=thanos.yaml
