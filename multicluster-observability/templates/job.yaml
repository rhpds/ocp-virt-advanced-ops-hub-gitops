---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
  # annotations:
  #   argocd.argoproj.io/hook: PostSync
  #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: multicluster-observability-job
  # annotations:
  #   argocd.argoproj.io/hook: PostSync
  #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: multicluster-observability-job
  namespace: {{ .Values.namespace }}
  # annotations:
  #   argocd.argoproj.io/hook: PostSync
  #   argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: multicluster-observability-job
      restartPolicy: Never
      containers:
      - name: ansible
        image: image-registry.openshift-image-registry.svc:5000/openshift/cli
        command:
        - /bin/sh
        - -c
        - |
          # step 1
          # Load up multiclusterhub-operator-pull-secret with cluster-config pull secret
          # set -euxo pipefail
          NAMESPACE="open-cluster-management-observability"

          DOCKER_CONFIG_JSON=$(oc extract secret/pull-secret -n openshift-config --to=-)

          # try to delete secret, don't fail on error
          oc delete secret multiclusterhub-operator-pull-secret -n $NAMESPACE || true

          oc create secret generic multiclusterhub-operator-pull-secret \
            -n $NAMESPACE \
            --from-literal=.dockerconfigjson="$DOCKER_CONFIG_JSON" \
            --type=kubernetes.io/dockerconfigjson

          # step 2
          # Load up thanos-object-storage secret with object store credentials and bucket info

          BUCKET_NAME=$(oc get objectbucketclaim observer-bucket -n $NAMESPACE -o jsonpath='{.spec.objectBucketName}')
          BUCKET_HOST=$(oc get objectbucket obc-open-cluster-management-observability-observer-bucket -n $NAMESPACE -o jsonpath='{.spec.endpoint.bucketHost}')
          BUCKET_PORT=$(oc get objectbucket obc-open-cluster-management-observability-observer-bucket -n $NAMESPACE -o jsonpath='{.spec.endpoint.bucketPort}')

          ACCESS_KEY=$(oc get secret observer-bucket -n $NAMESPACE -o jsonpath='{.data.AWS_ACCESS_KEY_ID}' | base64 -d)
          SECRET_KEY=$(oc get secret observer-bucket -n $NAMESPACE -o jsonpath='{.data.AWS_SECRET_ACCESS_KEY}' | base64 -d)
          echo "$BUCKET_NAME $BUCKET_HOST $BUCKET_PORT $ACCESS_KEY $SECRET_KEY"

          oc delete secret thanos-object-storage -n $NAMESPACE || true
          oc create secret generic thanos-object-storage \
            -n open-cluster-management-observability \
            --from-literal=thanos.yaml="|
            type: s3
            config:
              bucket: $BUCKET_NAME
              endpoint: $BUCKET_HOST:$BUCKET_PORT
              insecure: true
              access_key: $ACCESS_KEY
              secret_key: $SECRET_KEY
              http_config:
                insecure_skip_verify: true"
